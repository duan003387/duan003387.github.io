[1,["20g1ukYUVPvKWKBRznAKo+@f9941","7dj5uJT9FMn6OrOOx83tfK@f9941","f5GvINUidFUpTiNF1JfBzf","33+mOUN+VNqLGufu5CvZym@f9941","19AoXXUxRI1oP/c/oqzMDn","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","7dj5uJT9FMn6OrOOx83tfK@6c48a","43PgnLPutKC4GfGTc75u7y@f9941","37S8s90NBDRa4YueRv4JUN@f9941","45gWBCYldKy6FatJcMrFUQ","98zpUF40FMjqq07nl8yMlM@6c48a","0d5lrdJZZKz6QhQW4u3YWk@f9941","14vEQ5f4JPM50VyVatXNzT@f9941","fcJIG5kNtKGYp1euLzW6I/","59j67kw3ZEn5QZQlMy3QZ7@f9941","6c/HBr90hLZpQ2IziJmkxC@f9941","e2JmxKQJpOvqO41ugfU4b/","842Di9nHxFh65EnhnNAF1U@6c48a","173rzDCmtLirAL3Fi4hVge"],["node","_spriteFrame","_particleSystem","_target","_parent","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite","_textureSource","root","data","_cameraComponent","effectManager","customerManager","mapManager","fightLoading","scene","followCamera","loadingUI","_mainTexture","_defaultClip","prefab","imgShare","imgVideo","pfTailLine","mainTexture","_effectAsset"],[["cc.Node",["_name","_layer","_id","_objFlags","_components","_parent","_lpos","_children","_lscale","_lrot","_euler"],-1,9,1,5,2,5,5,5],["cc.UITransform",["_name","node","_contentSize","__prefab","_anchorPoint"],2,1,5,4,5],["cc.Sprite",["_sizeMode","_name","_isTrimmedMode","_type","node","_spriteFrame","__prefab","_color"],-1,1,6,4,5],["cc.Widget",["_alignFlags","_name","_originalWidth","_originalHeight","_alignMode","_top","_right","_bottom","_left","node","_target","__prefab"],-6,1,1,4],["cc.Node",["_name","_layer","_id","_components","_lpos","_parent","_children","_lrot","_euler"],0,12,5,1,2,5,5],["cc.Label",["_string","_actualFontSize","_fontSize","_overflow","_enableWrapText","node","__prefab","_color"],-2,1,4,5],["cc.Node",["_name","_layer","_id","_parent","_components","_prefab","_lpos","_children"],0,1,2,4,5,2],["cc.CurveRange",["constant","mode","constantMin","constantMax"],-1],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.GradientRange",["_mode","colorMin","colorMax"],2,5,5],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.ShapeModule",["arcSpread","length","_shapeType","_enable","arcSpeed"],-1,4],["cc.TrailModule",["_enable","existWithParticles","widthFromParticle","lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],0,4,4,4,4,1],["cc.ParticleSystemRenderer",["_renderMode","_mainTexture"],2,6],["cc.Layout",["_resizeMode","_layoutType","_spacingY","node","__prefab"],0,1,4],["cc.Camera",["_far","_visibility","_name","_near","_projection","_priority","_orthoHeight","_clearFlags","node","_color"],-5,1,5],"cc.SpriteFrame",["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Prefab",["_name"],2],["cc.ParticleSystem",["duration","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","bursts","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer"],2,1,4,12,4,4,4,4,4,4,4,4,4,4,4,4,4,9,4,4,4,4,4,4,4,4,4,4],["cc.ParticleSystem",["_name","simulationSpeed","_capacity","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","bursts","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer"],0,1,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,9,4,4,4,4,4,4,4,4,4,4],["cc.CompPrefabInfo",["fileId"],2],["cc.Burst",["count"],3,4],["cc.SizeOvertimeModule",["size","x","y","z"],3,4,4,4,4],["cc.VelocityOvertimeModule",["x","y","z","speedModifier"],3,4,4,4,4],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["cc.LimitVelocityOvertimeModule",["limitX","limitY","limitZ","limit"],3,4,4,4,4],["cc.RotationOvertimeModule",["x","y","z"],3,4,4,4],["cc.TextureAnimationModule",["frameOverTime","startFrame"],3,4,4],["cc.SceneAsset",["_name"],2],["cc.Canvas",["_name","node","_cameraComponent"],2,1,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumHDR","_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],1,5,5,5,5],["cc.ShadowsInfo",["_enabled","_bias","_near","_far","_shadowDistance","_saturation"],-3],["cc.SkyboxInfo",[],3],["cc.FogInfo",["_fogColor"],3,5],["cc.OctreeInfo",[],3],["cc.PrefabLink",["node","prefab"],3,1,6],["cc.Animation",["_name","playOnLoad","node","__prefab","_clips","_defaultClip"],1,1,4,3,6],["cc.Button",["_transition","node","clickEvents","_normalColor","_target","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite"],2,1,9,5,1,6,6,6,6],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.BlockInputEvents",["node"],3,1],["cc.UIMeshRenderer",["node","__prefab"],3,1,4],["0ab97H51jJALJr6aO9gzNGg",["_name"],2],["cc.BoxCollider",["node","_size"],3,1,5],["f3d36qkNslPB4TIGcZlp8vd",["node","fightLoading","mapManager","customerManager","carManager","effectManager","nodeGround"],3,1,1,1,1,1,1,1],["daea1EBoy1Ms6PBdAupQWnn",["node","carManager","tip"],3,1,1,1],["4b7cfRS5bdP8qo8rorNgln5",["node","__prefab"],3,1,4],["99c5fx0klFHq52oGPdZL7Z5",["_name","node","__prefab","lbProgress","lbTips"],2,1,4,1,1],["ff8ee6OQldPNLrgLpXROotm",["_name","isFollowRotation","node","offset"],1,1,5],["273adkVLRhECoDje+nCdBuE",[],3],["586a8tdaBhPQprl2rcvzztA",["_name"],2],["cf371ivOc1Ae64t3ScAzqjv",["carManager"],3,1],["cc.DirectionalLight",["_name","_useColorTemperature","_colorTemperature","_illuminanceHDR","_illuminanceLDR","node","_color","_staticSettings"],-2,1,5,4],["cc.StaticLightSettings",[],3],["cc.Material",["_techIdx","_states","_defines","_props"],0,12]],[[7,1],[21,0,2],[1,1,2,1],[0,0,1,5,4,6,3],[7,0,2],[5,0,1,5,7,3],[9,1],[0,0,1,5,7,4,6,3],[1,1,3,2,1],[0,0,1,5,4,3],[1,1,1],[2,0,4,5,2],[6,0,2,3,4,3],[8,0,1,2,2],[22,0,1],[23,0,1,2,3,1],[24,0,1,2,3,1],[25,0,1,2,1],[26,0,1,2,3,1],[27,0,1,2,1],[28,0,1,1],[1,0,1,3,2,2],[1,1,2,4,1],[6,0,3,4,5,6,2],[4,0,1,5,3,4,3],[0,0,3,1,5,4,4],[19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,2],[10,1,1],[11,2,0,1,4,4],[12,0,1,2,3,4,5,6,7,4],[13,0,2],[1,0,1,2,2],[3,0,6,5,9,4],[2,1,0,4,6,5,3],[2,3,0,4,5,3],[2,0,2,4,6,5,3],[2,0,4,6,5,2],[40,0,1,2,3,4,5,6,7,8,2],[41,0,1,2,3],[5,0,1,2,5,4],[5,0,1,5,6,3],[5,0,1,3,4,5,7,5],[17,0,1,2,4],[18,0,2],[6,0,7,5,2],[6,0,1,3,4,6,3],[4,0,1,2,6,3,4,4],[4,0,1,5,6,3,3],[4,0,1,5,3,4,7,8,3],[4,0,2,5,3,4,7,8,3],[0,0,1,7,4,6,3],[0,0,1,5,7,4,3],[0,0,2,5,4,8,3],[0,0,2,5,4,3],[0,0,2,5,4,6,9,10,3],[8,0,2],[20,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,4],[9,0,1,2,2],[7,1,2,3,4],[10,0,1,2],[11,3,0,1,4,4],[12,3,4,5,6,7,1],[13,1,1],[29,0,2],[1,1,3,1],[30,0,1,2,2],[3,0,9,2],[3,1,0,2,3,4,9,11,10,6],[3,0,2,3,9,4],[3,0,7,9,3],[3,1,0,8,5,4,9,10,6],[31,0,1,2,3,2],[32,0,1,2,3,4,1],[33,0,1,2,3,4,5,3],[34,0,1,2,3,4,5,7],[35,1],[36,0,1],[37,1],[2,1,2,4,6,3],[2,0,4,7,5,2],[38,0,1,1],[14,0,1,2,3,4],[14,0,1,3,4,3],[39,0,1,2,3,4,5,3],[42,0,1],[5,0,1,2,5,6,4],[43,0,1,1],[44,0,2],[15,2,3,0,1,8,9,5],[15,4,5,6,0,7,1,8,9,7],[45,0,1,1],[46,0,1,2,3,4,5,6,1],[47,0,1,2,1],[48,0,1,1],[49,0,1,2,3,4,2],[50,0,1,2,3,3],[51,1],[52,0,2],[53,0,1],[54,0,1,2,3,4,5,6,7,6],[55,1],[56,0,1,2,3,4]],[[[[42,"builtin-particle-trail",[{"hash":1437790364,"name":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":17,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(set = 0, binding = 0) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(set = 0, binding = 1) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  layout(location = 0) in vec2 uv;\n  layout(location = 1) in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    layout(location = 2) in vec3 vBarycentric;\n  #endif\n  layout(set = 1, binding = 2) uniform sampler2D mainTexture;\n  layout(set = 1, binding = 1) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 add () {\n    vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., 1.);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  in vec2 uv;\n  in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    in vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n  layout(std140) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 add () {\n    vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., 1.);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  varying vec2 uv;\n  varying vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    varying vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n      uniform vec4 tintColor;\n  vec4 add () {\n    vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., 1.);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]}]},{"hash":1577621763,"name":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:multiply","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":17,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(set = 0, binding = 0) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(set = 0, binding = 1) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  layout(location = 0) in vec2 uv;\n  layout(location = 1) in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    layout(location = 2) in vec3 vBarycentric;\n  #endif\n  layout(set = 1, binding = 2) uniform sampler2D mainTexture;\n  layout(set = 1, binding = 1) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 multiply () {\n    vec4 col;\n    vec4 texColor = texture(mainTexture, uv);\n    col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n    col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., col.a);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  in vec2 uv;\n  in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    in vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n  layout(std140) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 multiply () {\n    vec4 col;\n    vec4 texColor = texture(mainTexture, uv);\n    col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n    col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., col.a);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  varying vec2 uv;\n  varying vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    varying vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n      uniform vec4 tintColor;\n  vec4 multiply () {\n    vec4 col;\n    vec4 texColor = texture2D(mainTexture, uv);\n    col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n    col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., col.a);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]}]},{"hash":1428325067,"name":"builtin-particle-trail|particle-trail:vs_main|no-tint-fs:addSmooth","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":1,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]}]},{"hash":1371359874,"name":"builtin-particle-trail|particle-trail:vs_main|no-tint-fs:premultiplied","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":1,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]}]}],[{"name":"add","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":4,"blendSrcAlpha":1,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-multiply","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":4,"blendSrcAlpha":1,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-smooth","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":4,"blendSrcAlpha":1,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]}}}]},{"name":"premultiply-blend","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":4,"blendSrcAlpha":1,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[{"name":"default_sprite_splash","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[16],0,[0],[9],[7]],[[[43,"TrailModule02"],[44,"TrailModule02",[-2,-3],[13,"a8KUcggipAHoIZ9qqfYejW",-1,0]],[23,"TrailModule02",1,[-4],[13,"fcn7yiztNOVIH1tYt/9vS+",1,0],[1,0.18,0.1,0.5]],[26,1,2,[1,"02nluIw+hC9rc888NqDZWd"],[[null,0],0,6],[6],[0],[0],[0],[0],[0],[0],[0],[0],[4,2],[0],[0],[0],[[14,[4,1]]],[27,[6]],[28,0,8,0,[0]],[15,[0],[0],[0],[0]],[16,[0],[0],[0],[4,1]],[17,[0],[0],[0]],[18,[0],[0],[0],[0]],[19,[0],[0],[0]],[20,[0],[0]],[29,true,false,false,[4,0.8],[4,0.1],[6],[6],-5],[30,2]],[23,"TrailModule02",1,[-6],[13,"eemNW/m6NBJ5wfYnvnhePh",1,0],[1,-0.18,0.1,0.5]],[26,1,4,[1,"78L5giq1tJNqQ/RGrHOkzG"],[[null,1],0,6],[6],[0],[0],[0],[0],[0],[0],[0],[0],[4,2],[0],[0],[0],[[14,[4,1]]],[27,[6]],[28,0,8,0,[0]],[15,[0],[0],[0],[0]],[16,[0],[0],[0],[4,1]],[17,[0],[0],[0]],[18,[0],[0],[0],[0]],[19,[0],[0],[0]],[20,[0],[0]],[29,true,false,false,[4,0.8],[4,0.1],[6],[6],-7],[30,2]]],0,[0,10,1,0,-1,2,0,-2,4,0,-1,3,0,2,3,0,-1,5,0,2,5,0,11,1,7],[0,0],[-2,-2],[2,2]],[[[63,"main"],[46,"Canvas",33554432,"6fBTKAM9BJipWBL6z8kjmb",[-6,-7,-8,-9,-10,-11,-12],[[[31,"Canvas<UITransform>",-1,[5,720,1280]],[65,"Canvas<Canvas>",-3,-2],-4,[66,45,-5]],4,4,1,4],[1,360,640,0]],[71,"main",[-13,-14,-15,-16,-17,-18,-19,-20,1],[55,"e96d6ae0-6179-4ac3-8969-a9b662fb0e9c"],[72,[73,90000,3.515625,[2,0.8392156862745098,0.9647058823529412,1,2.3437490625],[2,1,1,1,1],[2,0.8392156862745098,0.9647058823529412,1,0.520833125],[2,1,1,1,1]],[74,true,0.1,1,30,3.4641016151377544,0.2980392156862745],[75],[76,[4,4292993505]],[77]]],[47,"loading",33554432,1,[-26,-27,-28,-29],[[[21,"loading<UITransform>",-21,[1,"6egT/BrSlKg405gNCkflT7"],[5,720,1280]],[67,"loading<Widget>",45,100,100,1,-22,[1,"dbJsmv7ctEA4aorcjMmHdW"],1],-23,[78,"loading<Sprite>",false,-24,[1,"a8wJ9TALNCKLzrB8a1mLCr"]],[80,-25,10]],4,4,1,4,4]],[50,"rankContent",33554432,[-32,-33,-34,-35,-36],[[22,-30,[5,600,580],[0,0.5,1]],[81,1,2,20,-31]],[1,0,-437.699,0]],[51,"loadingCar03",33554432,3,[-40,-41,-42],[[21,"loadingCar03<UITransform>",-37,[1,"a7WcN0fq9J7IWgUDveOVhh"],[5,144,26]],[33,"loadingCar03<Sprite>",0,-38,[1,"58if+HdgxAWotkP6c7jCW6"],7],[83,"loadingCar03<Animation>",true,-39,[1,"b4jN3SeUtIfq/2eCrd4Uxl"],[8],9]]],[7,"Button",33554432,1,[-48],[[2,-43,[5,200,80]],[34,1,0,-44,11],[37,2,-46,[[38,"daea1EBoy1Ms6PBdAupQWnn","share",1]],[4,4292269782],-45,12,13,14,15],[32,33,35.47999999999996,18.894999999999982,-47]],[1,224.52000000000004,581.105,0]],[7,"Button-001",33554432,1,[-54],[[2,-49,[5,200,80]],[34,1,0,-50,16],[37,2,-52,[[38,"daea1EBoy1Ms6PBdAupQWnn","randomUpLoadScore",1]],[4,4292269782],-51,17,18,19,20],[32,33,35.47999999999996,146.07100000000003,-53]],[1,224.52000000000004,453.929,0]],[7,"rank",33554432,1,[-58,-59,4],[[22,-55,[5,720,1280],[0,0.5,1]],[68,45,600,800,-56],[84,-57]],[1,0,640,0]],[7,"ranItem",33554432,4,[-61,-62,-63,-64],[[10,-60]],[1,0,-50,0]],[7,"ranItem-001",33554432,4,[-66,-67,-68,-69],[[10,-65]],[1,0,-170,0]],[7,"ranItem-002",33554432,4,[-71,-72,-73,-74],[[10,-70]],[1,0,-290,0]],[7,"ranItem-003",33554432,4,[-76,-77,-78,-79],[[10,-75]],[1,0,-410,0]],[7,"ranItem-004",33554432,4,[-81,-82,-83,-84],[[10,-80]],[1,0,-530,0]],[7,"loadingCar01",33554432,5,[-87,-88],[[21,"loadingCar01<UITransform>",-85,[1,"baY4XPA1FHxKHorQo3zI2H"],[5,195,95]],[33,"loadingCar01<Sprite>",0,-86,[1,"30DA+hF0pIb6JxD4ix8pjh"],6]],[1,0,31.452999999999975,0]],[7,"progress",33554432,3,[-91,-92],[[8,-89,[1,"d9wzpk1Y1CMqurgnVCSvNF"],[5,57.82,40]],[82,1,1,-90,[1,"63QhzOb/5O3JnDQ5aawoBR"]]],[1,0,-130,0]],[3,"tip",33554432,1,[[2,-93,[5,253.37,50.4]],[39,"小提示：请用 login 场景运行",20,20,-94],[69,4,20,-95]],[1,0,-594.8,0]],[48,"car",33554432,5,[[-96,[86,-97,[1,"63uYVc5l5GWqZRWQthO5uW"]],[64,-98,[1,"85PiOe/atC2Z2BnFUO6mVA"]]],1,4,4],[1,97.689,-2.848,0],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,0,-90,0]],[24,"progress",33554432,15,[[[8,-99,[1,"f1w+ZC3W9Kvoh057L4uTBX"],[5,22.25,50.4]],-100,[40,"0",40,-101,[1,"0a+q0IDYJIEZGVSmveekMQ"]]],4,1,4],[1,-17.785,0,0]],[87,"carManager<carManager>"],[3,"goldPos",33554432,1,[[31,"goldPos<UITransform>",-102,[5,50,50]],[70,"goldPos<Widget>",9,20,50,1,-103,1]],[1,-315,565,0]],[9,"bg",33554432,3,[[8,-104,[1,"8e3urAe8RKW7Ho4tDUzZZs"],[5,720,1600]],[35,2,false,-105,[1,"a3SFmkhdZERJkAKLx3XeW4"],0]]],[3,"shadow",33554432,5,[[8,-106,[1,"73JYvH2F1KG7G9jc2dWPUC"],[5,278,92]],[35,2,false,-107,[1,"f2STupipNAdalPambEYOIx"],1]],[1,0,-16.76,0]],[3,"loadingCar02",33554432,14,[[8,-108,[1,"5cWRCVuvBC36YNPQW3wTsA"],[5,32,32]],[36,0,-109,[1,"fd5ZZqgHtN8Kd9ih6KMnuN"],4]],[1,-49.023,-40.548,0]],[3,"loadingCar03",33554432,14,[[8,-110,[1,"0fVPFJU95G/KYlIfETIWAb"],[5,32,32]],[36,0,-111,[1,"d9QyOiAXVKlqj6KvNb6X8J"],5]],[1,44.1,-41.744,0]],[3,"percent",33554432,15,[[8,-112,[1,"2aBFG3oQhOgpO3xToxICCe"],[5,35.57,50.4]],[40,"%",40,-113,[1,"5a46w4sO1P8ayyjtb+k2gu"]]],[1,11.125,0,0]],[24,"tips",33554432,3,[[[8,-114,[1,"64daaEp6ZN9ZvTcZ+We0nx"],[5,186.67,50.4]],-115],4,1],[1,0,-200,0]],[25,"Label",512,33554432,6,[[2,-116,[5,200,80]],[41,"Share",40,1,false,-117,[4,4278190080]]]],[25,"Label",512,33554432,7,[[2,-118,[5,200,80]],[41,"upload\nscore",40,1,false,-119,[4,4278190080]]]],[3,"SpriteSplash",33554432,8,[[22,-120,[5,600,800],[0,0.5,1]],[79,0,-121,[4,4284572001],21]],[1,0,-271.307,0]],[3,"Label",33554432,8,[[2,-122,[5,166.7,50.4]],[39,"RANK",60,60,-123]],[1,0,-343.928,0]],[9,"SpriteSplash",33554432,9,[[2,-124,[5,500,100]],[11,0,-125,22]]],[3,"rankindex",33554432,9,[[2,-126,[5,22.25,50.4]],[5,"1",40,-127,[4,4278190080]]],[1,-207.348,0,0]],[3,"nickName",33554432,9,[[2,-128,[5,106.7,50.4]],[5,"Name",40,-129,[4,4278190080]]],[1,-13.348,0,0]],[3,"score",33554432,9,[[2,-130,[5,44.49,50.4]],[5,"20",40,-131,[4,4278190080]]],[1,192.652,0,0]],[9,"SpriteSplash",33554432,10,[[2,-132,[5,500,100]],[11,0,-133,23]]],[3,"rankindex",33554432,10,[[2,-134,[5,22.25,50.4]],[5,"1",40,-135,[4,4278190080]]],[1,-207.348,0,0]],[3,"nickName",33554432,10,[[2,-136,[5,106.7,50.4]],[5,"Name",40,-137,[4,4278190080]]],[1,-13.348,0,0]],[3,"score",33554432,10,[[2,-138,[5,44.49,50.4]],[5,"20",40,-139,[4,4278190080]]],[1,192.652,0,0]],[9,"SpriteSplash",33554432,11,[[2,-140,[5,500,100]],[11,0,-141,24]]],[3,"rankindex",33554432,11,[[2,-142,[5,22.25,50.4]],[5,"1",40,-143,[4,4278190080]]],[1,-207.348,0,0]],[3,"nickName",33554432,11,[[2,-144,[5,106.7,50.4]],[5,"Name",40,-145,[4,4278190080]]],[1,-13.348,0,0]],[3,"score",33554432,11,[[2,-146,[5,44.49,50.4]],[5,"20",40,-147,[4,4278190080]]],[1,192.652,0,0]],[9,"SpriteSplash",33554432,12,[[2,-148,[5,500,100]],[11,0,-149,25]]],[3,"rankindex",33554432,12,[[2,-150,[5,22.25,50.4]],[5,"1",40,-151,[4,4278190080]]],[1,-207.348,0,0]],[3,"nickName",33554432,12,[[2,-152,[5,106.7,50.4]],[5,"Name",40,-153,[4,4278190080]]],[1,-13.348,0,0]],[3,"score",33554432,12,[[2,-154,[5,44.49,50.4]],[5,"20",40,-155,[4,4278190080]]],[1,192.652,0,0]],[9,"SpriteSplash",33554432,13,[[2,-156,[5,500,100]],[11,0,-157,26]]],[3,"rankindex",33554432,13,[[2,-158,[5,22.25,50.4]],[5,"1",40,-159,[4,4278190080]]],[1,-207.348,0,0]],[3,"nickName",33554432,13,[[2,-160,[5,106.7,50.4]],[5,"Name",40,-161,[4,4278190080]]],[1,-13.348,0,0]],[3,"score",33554432,13,[[2,-162,[5,44.49,50.4]],[5,"20",40,-163,[4,4278190080]]],[1,192.652,0,0]],[49,"Camera","c9DMICJLFO5IeO07EPon7U",2,[[[88,"Camera<Camera>",0.01,200,1822425087,-164,[4,4278190080]],-165],4,1],[1,2,1,45],[3,0.5,0.5,-0.4999999999999999,0.5000000000000001],[1,90,90,0]],[52,"ground","74Ik+C9nFKIaaIMYem97us",2,[[90,-166,[1,10,0.00001,10]]],[1,100,1,100]],[53,"core","61pedcRJZHlZoG2orKlqVN",2,[[91,-171,-170,-169,-168,19,-167,52]]],[92,1,19,16],[45,"UICamera_Canvas",33554432,1,[-172],[1,0,0,1000]],[89,0,1073741824,640,2000,0,42467328,55,[4,0]],[56,"car<ParticleSystem>",1.2,30,17,[1,"b9x5A9ScBESaNmhvaAKrTB"],[2],[6],[4,15],[0],[0],[4,80],[0],[0],[4,45],[0],[4,0.5],[4,-5],[4,15],[0],[[14,[0]]],[59,true,[57,2,[4,4278650644],[4,4291026400]]],[60,true,8,0,[0]],[15,[58,3,20,5],[0],[0],[0]],[16,[0],[0],[0],[4,1]],[17,[0],[0],[0]],[18,[0],[0],[0],[0]],[19,[0],[0],[0]],[20,[0],[0]],[61,[0],[0],[6],[6],-173],[62,3]],[93,18,[1,"de4wdygStLtoBc0oB68x1j"]],[85,"正在加载中...",32,32,26,[1,"b1Dxx9oIFAfZ9DqvrGhziM"]],[94,"loading<loading>",3,[1,"0cNHwSQu5A97T6Qyqw3yRC"],58,59],[12,"carManager","41X1KWCiVAHKJosV8PvWHs",2,[19]],[95,"Camera<follow>",false,51,[1,0,8,8]],[96],[12,"map","da7mwPtl9Ng6We4DEm0Pdr",2,[63]],[97,"customerManager<customerManager>"],[12,"customerManager","b44AnqOxBAlZ82meUtOH7S",2,[65]],[98,19],[12,"effectManager","d5+yEjVkBNb7NGfRFMLdUX",2,[67]],[54,"Main Light","c0y6F5f+pAvI805TdmxIjx",2,[[99,"Main Light<DirectionalLight>",true,5264,20000,0.5208333333333334,-174,[4,4294833823],[100]]],[1,8.88,27.902,9.736],[3,-0.8197396846350875,0.11414891268284719,-0.03675812290240226,0.5600408159843199],[1,-110.858,3.981,-13.198]]],0,[0,0,1,0,12,56,0,0,1,0,-3,54,0,0,1,0,-1,20,0,-2,55,0,-3,3,0,-4,16,0,-5,6,0,-6,7,0,-7,8,0,-1,53,0,-2,69,0,-3,51,0,-4,52,0,-5,64,0,-6,66,0,-7,68,0,-8,61,0,0,3,0,0,3,0,-3,60,0,0,3,0,0,3,0,-1,21,0,-2,5,0,-3,15,0,-4,26,0,0,4,0,0,4,0,-1,9,0,-2,10,0,-3,11,0,-4,12,0,-5,13,0,0,5,0,0,5,0,0,5,0,-1,22,0,-2,17,0,-3,14,0,0,6,0,0,6,0,3,6,0,0,6,0,0,6,0,-1,27,0,0,7,0,0,7,0,3,7,0,0,7,0,0,7,0,-1,28,0,0,8,0,0,8,0,0,8,0,-1,29,0,-2,30,0,0,9,0,-1,31,0,-2,32,0,-3,33,0,-4,34,0,0,10,0,-1,35,0,-2,36,0,-3,37,0,-4,38,0,0,11,0,-1,39,0,-2,40,0,-3,41,0,-4,42,0,0,12,0,-1,43,0,-2,44,0,-3,45,0,-4,46,0,0,13,0,-1,47,0,-2,48,0,-3,49,0,-4,50,0,0,14,0,0,14,0,-1,23,0,-2,24,0,0,15,0,0,15,0,-1,18,0,-2,25,0,0,16,0,0,16,0,0,16,0,-1,57,0,0,17,0,0,17,0,0,18,0,-2,58,0,0,18,0,0,20,0,0,20,0,0,21,0,0,21,0,0,22,0,0,22,0,0,23,0,0,23,0,0,24,0,0,24,0,0,25,0,0,25,0,0,26,0,-2,59,0,0,27,0,0,27,0,0,28,0,0,28,0,0,29,0,0,29,0,0,30,0,0,30,0,0,31,0,0,31,0,0,32,0,0,32,0,0,33,0,0,33,0,0,34,0,0,34,0,0,35,0,0,35,0,0,36,0,0,36,0,0,37,0,0,37,0,0,38,0,0,38,0,0,39,0,0,39,0,0,40,0,0,40,0,0,41,0,0,41,0,0,42,0,0,42,0,0,43,0,0,43,0,0,44,0,0,44,0,0,45,0,0,45,0,0,46,0,0,46,0,0,47,0,0,47,0,0,48,0,0,48,0,0,49,0,0,49,0,0,50,0,0,50,0,0,51,0,-2,62,0,0,52,0,13,67,0,14,65,0,15,63,0,16,54,0,0,53,0,-1,56,0,2,57,0,0,69,0,17,2,1,4,2,4,4,8,19,18,62,19,0,61,54,19,60,63,0,64,65,0,66,67,0,68,174],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,54,67],[1,1,-1,20,1,1,1,1,-1,21,22,1,5,6,7,8,1,5,6,7,8,1,1,1,1,1,1,23,24,25],[8,9,10,11,3,3,12,13,4,4,14,0,0,0,5,6,0,0,0,5,6,1,1,1,1,1,1,15,16,17]],[[[101,"1",[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{}],[[[{},"tintColor",8,[4,1180984420],"mainTexture",6,0]],11]]],0,0,[0,0],[26,27],[18,19]]]]
